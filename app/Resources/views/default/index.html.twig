{% extends 'base.html.twig' %}

{% block body %}
    <div id="wrapper">
        <div id="container">
          <!-- Video area -->
          <div class="pure-u-2-3" id="video-container">
            <video id="their-video" autoplay></video>
            <video id="my-video" muted="true" autoplay></video>
          </div>

          <!-- Steps -->
          <div class="pure-u-1-3">
            <h2>PeerJS Video Chat</h2>

            <!-- Get local audio/video stream -->
            <div id="step1">
              <p>Please click `allow` on the top of the screen so we can access your webcam and microphone for calls.</p>
              <div id="step1-error">
                <p>Failed to access the webcam and microphone. Make sure to run this demo on an http server and click allow when asked for permission by the browser.</p>
                <a href="#" class="pure-button pure-button-error" id="step1-retry">Try again</a>
              </div>
            </div>

            <!-- Make calls to others -->
            <div id="step2">
              <p>Your id: <span id="my-id">...</span></p>
              <p>Share this id with others so they can call you.</p>
              <h3>Make a call</h3>
              <div class="pure-form">
                <input type="text" placeholder="Call user id..." id="callto-id">
                <a href="#" class="pure-button pure-button-success" id="make-call">Call</a>
              </div>
            </div>

            <!-- Call in progress -->
            <div id="step3">
              <p>Currently in call with <span id="their-id">...</span></p>
              <p><a href="#" class="pure-button pure-button-error" id="end-call">End call</a></p>
            </div>
          </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
<script>

    // Compatibility shim
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    // PeerJS object
    var peer = new Peer({ host:'ea-peer-sv.herokuapp.com', port:80, debug: 3});

    peer.on('open', function(){
      $('#my-id').text(peer.id);
    });

    // Receiving a call
    peer.on('call', function(call){
      // Answer the call automatically (instead of prompting user) for demo purposes
      call.answer(window.localStream);
      step3(call);
    });
    peer.on('error', function(err){
      alert(err.message);
      // Return to step 2 if error occurs
      step2();
    });

    // Click handlers setup
    $(function(){
      $('#make-call').click(function(){
        // Initiate a call!
        var call = peer.call($('#callto-id').val(), window.localStream);

        step3(call);
      });

      $('#end-call').click(function(){
        window.existingCall.close();
        step2();
      });

      // Retry if getUserMedia fails
      $('#step1-retry').click(function(){
        $('#step1-error').hide();
        step1();
      });

      // Get things started
      step1();
    });

    function step1 () {
      // Get audio/video stream
      navigator.getUserMedia({audio: true, video: true}, function(stream){
        // Set your video displays
        $('#my-video').prop('src', URL.createObjectURL(stream));

        window.localStream = stream;
        step2();
      }, function(){ $('#step1-error').show(); });
    }

    function step2 () {
      $('#step1, #step3').hide();
      $('#step2').show();
    }

    function step3 (call) {
      // Hang up on an existing call if present
      if (window.existingCall) {
        window.existingCall.close();
      }

      // Wait for stream on the call, then set peer video display
      call.on('stream', function(stream){
        $('#their-video').prop('src', URL.createObjectURL(stream));
      });

      // UI stuff
      window.existingCall = call;
      $('#their-id').text(call.peer);
      call.on('close', step2);
      $('#step1, #step2').hide();
      $('#step3').show();
    }

  </script>
<script type="text/javascript">
    // var peer = new Peer('{{ peer_id }}', {key: 'ifu99gfqxdhrggb9'});
    // console.log(peer);

    // var conn = peer.connect('{{ conn_peer_id }}');
    // console.log(conn);
    // conn.on('open', function(){
    //   //conn.send('hi!');
    // });

    // peer.on('connection', function(conn) {
    //   conn.on('data', function(data){
    //     // Will print 'hi!'
    //     console.log(data);
    //   });
    // });

    // navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    // navigator.getUserMedia({video: true, audio: true}, function(stream) {
    //   var call = peer.call('{{ conn_peer_id }}', stream);
    //   call.on('stream', function(remoteStream) {
    //     // Show stream in some <video> element.
    //   });
    // }, function(err) {
    //   console.log('Failed to get local stream' ,err);
    // });

    // peer.on('call', function(call) {
    //   navigator.getUserMedia({video: true, audio: true}, function(stream) {
    //     call.answer(stream); // Answer the call with an A/V stream.
    //     call.on('stream', function(remoteStream) {
    //       // Show stream in some <video> element.
    //     });
    //   }, function(err) {
    //     console.log('Failed to get local stream' ,err);
    //   });
    //});
</script>

{% endblock %}
{% block stylesheets %}
<style>
    body { background: #F5F5F5; font: 18px/1.5 sans-serif; }
    h1, h2 { line-height: 1.2; margin: 0 0 .5em; }
    h1 { font-size: 36px; }
    h2 { font-size: 21px; margin-bottom: 1em; }
    p { margin: 0 0 1em 0; }
    a { color: #0000F0; }
    a:hover { text-decoration: none; }
    code { background: #F5F5F5; max-width: 100px; padding: 2px 6px; word-wrap: break-word; }
    #wrapper { background: #FFF; margin: 1em auto; max-width: 800px; width: 95%; }
    #container { padding: 2em; }
    #welcome, #status { margin-bottom: 2em; }
    #welcome h1 span { display: block; font-size: 75%; }
    #icon-status, #icon-book { float: left; height: 64px; margin-right: 1em; margin-top: -4px; width: 64px; }
    #icon-book { display: none; }

    @media (min-width: 768px) {
        #wrapper { width: 80%; margin: 2em auto; }
        #icon-book { display: inline-block; }
        #status a, #next a { display: block; }

        @-webkit-keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
        @keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
        .sf-toolbar { opacity: 0; -webkit-animation: fade-in 1s .2s forwards; animation: fade-in 1s .2s forwards;}
    }
</style>
{% endblock %}
